spring-tx spring-jdbc


1. TransactionSynchronizationManager 判断当前thread有没有ConnectionHolder实例，注册ConnectionHolder到thread.
2. @Transactional 标明当前类或者方法使用事务.


/***********************************************************************
****************org.springframework.transaction********************
***********************************************************************/
3. TransactionDefinition 定义事务的属性
	事务的传播行为 getPropagationBehavior  
		默认:PROPAGATION_REQUIRED 表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务
	务的隔离级别 getIsolationLevel
		默认:ISOLATION_DEFAULT  使用后端数据库默认的隔离级别 
	事务必须在多少秒内完成 getTimeout
		默认: 使用后端数据库默认的超时时间
	事务是否只读，事务管理器能够根据这个返回值进行优化，确保事务是只读的 isReadOnly
		默认: false.
	只读事务: 而Oracle的只读查询(read-only transaction)则保证了事务级别的读一致性，即在该事务范围内执行的多条SQL都只会看到执行前点的数据状态，
	而不会看到事务期间的任何被其他SQL改变的状态。由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，
	例如Oracle对于只读事务，不启动回滚段，不记录回滚log。
4. PlatformTransactionManager Spring的Platform的事务管理.
   TransactionStatus getTransaction(TransactionDefinition definition) 返回当前可用的transaction或创建一个
	    //开启事务,关闭自动提交
	    if (con.getAutoCommit()) {
			txObject.setMustRestoreAutoCommit(true);
			if (logger.isDebugEnabled()) {
				logger.debug("Switching JDBC Connection [" + con + "] to manual commit");
			}
			con.setAutoCommit(false);
		}
   
   void commit(TransactionStatus status)提交事务
   void rollback(TransactionStatus status)回滚事务
       //当事务提交或回滚,把连接设置回之前的状态.
       Connection con = txObject.getConnectionHolder().getConnection();
		try {
			if (txObject.isMustRestoreAutoCommit()) {
				con.setAutoCommit(true);
			}
			DataSourceUtils.resetConnectionAfterTransaction(con, txObject.getPreviousIsolationLevel());
		}
5. org.springframework.jdbc.datasource.DataSourceTransactionManager Spring的Platform事务管理的实现

6. TransactionStatus
	   transaction: transaction对象
       newTransaction: 是否为新的trasaction.
       hasSavepoint: 有没有savepoint 支持nestedTransaction.
       rollbackOnly: 是否回滚
       isCompleted: 是否完成



/***********************************************************************
****************org.springframework.transaction.support********************
***********************************************************************/
6. TransactionTemplate 编程式事务的实现.
7. DefaultTransactionDefinition 这是TrasactionTemplate的父类, 这样的话,可以在TrasactionTemplate中定义你需要的事务属性.
8. org.springframework.transaction.interceptor.TransactionProxyFactoryBean 代理模式实现事务
9. org.springframework.transaction.interceptor.TransactionInterceptor 事务拦截器
10. org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator 可以给指定的BeanName创建代理并使用事务拦截器.
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="interceptorPointCuts"
            expression="execution(* com.bluesky.spring.dao.*.*(..))" />
        <aop:advisor advice-ref="txAdvice"
            pointcut-ref="interceptorPointCuts" />       
    </aop:config>     


/***********************************************************************
****************org.springframework.transaction.annotation********************
***********************************************************************/
7. @Transactional 标明当前类或者方法使用事务.
8. org.springframework.transaction.config.TxNamespaceHandler 事务的  b理类,默认使用Bean的名称"transactionManager"的事务.
9. org.springframework.transaction.config.AnnotationDrivenBeanDefinitionParser 这个标签在启用<tx:annotation-driven..>的时候启用.
   aspectj: cglib实现方式
   aop(默认): 代理方式实现.
		Bean   org.springframework.transaction.annotation.AnnotationTransactionAttributeSource
        	   org.springframework.transaction.annotation.SpringTransactionAnnotationParser 从类或者方法中标注为 @Transactional解析出(TransactionAttribute)
        Bean   org.springframework.transaction.interceptor.TransactionInterceptor
               	注册TransactionManager的Inteceptor.
               	注册transactionAttributeSource,把上面的Bean.
        以上使用AOP实现的代理方式,相当于以下实现了一个Interceptor.
	   <bean id="transactionInterceptor" 
	        class="org.springframework.transaction.interceptor.TransactionInterceptor"> 
	        <property name="transactionManager" ref="transactionManager" /> 
	        <!-- 配置事务属性 --> 
	        <property name="transactionAttributes"> 
	            <props> 
	                <prop key="*">PROPAGATION_REQUIRED</prop> 
	            </props> 
	        </property> 
	    </bean>
	    Bean  org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor
	         	 注册transactionAttributeSource,把上面的Bean.r
	         	 注册adviceBeanName,把上面的transactionInterceptor.
       以上使用AOP实现的代理方式,相当于以下实现了一个Advisor.
          <bean class="org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSouceAdvisor"> 
		        <property name="transactionAttributeSource" ref="transactionInterceptor"> 
		        </property> 
		        <property name="adviceBeanName" ref="annotationTransactionAttributeSource">  
		        </property> 
		    </bean> 
		    
9. 现在使用最多的事务管理模式是使用全注解,使用扫描的方式来自动注释事务, 这里的tx指定了TransactionManager,这样的话在Annotation中使用@Transactional
    <context:annotation-config />
    <context:component-scan base-package="com.bluesky" />
    <tx:annotation-driven transaction-manager="transactionManager"/>
        现在基本上都使用全注解事务, 而其他工作就交给Spring来帮你完成,这样可以减少Coding,也可以减少错误.


