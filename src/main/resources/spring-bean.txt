spring-bean


/***********************************************************************
****************org.springframework.beans.factory********************
***********************************************************************/
1. BeanFactory 这是Spring Bean容器的接口.
   1.1 &  fanctoryBean前缀
   1.2 Object getBean(String name) 返回Bean实例
   1.3 boolean containsBean(String name) 当前Bean存在吗
   1.4 boolean isSingleton(String name) 单例?
   1.5 boolean isPrototype(String name) 原型
 
2. SimpleJndiBeanFactory

3. XmlBeanFactory 方便的方法，扩展自DefaultListableBeanFactory由XmlBeanDefinitionReader读取BeanDefinitions从xml文档中.

4. AbstractBeanFactory
   doGetBean 
    *. beanName 获取BeanName.
    *. BeanDefinition 根据beanName获取BeanDefinition.
    *. dependsOn 如果有dependsOn,那么先实例化dependsOn的Beans,然后设置dependsOn到这个Bean.
    *. singleton 注册时单例，如果Map里面没有这个Bean，那么创建，否者返回Map的实例.
    *. prototype 每一次都新建一个实例.
    *. Scope    在Spring4.3都已经废弃了.

5. AbstractAutowireCapableBeanFactory
   createBean
   *. load Class.
   *. InstantiationStrategy BeanWrapper 实例化策略,空构造函数构造实例.
      *. BeanWrapper bw = new BeanWrapperImpl(beanInstance);
      *. initBeanWrapper(bw);
   *. populateBean 
      *. PropertyValues pvs = mbd.getPropertyValues(); 获取依赖的属性.
      *. String propertyName = pv.getName(); 获取依赖名称
	  *. Object originalValue = pv.getValue();获取依赖值
	  *. Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue); 获取resolved值，有一些是RuntimeBeanReference等等的.
	  *. bw.setPropertyValues(new MutablePropertyValues(deepCopy)); 设置转化好的值回BeanWrapperImpl里面,最后反射这些值到Bean对象.
   *. initializeBean 调用init等方法初始化当前Bean.
   *. 返回这个对象.
5.1 org.springframework.beans.BeanWrapper Spring的低级JavaBeans基础架构的中心接口。     

5.2 org.springframework.beans.BeanWrapperImpl Spring的低级JavaBeans基础架构的中心接口实现类
	  
6. ListableBeanFactory 扩展BeanFactory,可以list 所有的Bean实例，而不用一个一个实例化.
   6.1 boolean containsBeanDefinition(String beanName); 当前Factory包含beanName.
   6.2 Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) 寻找所有Bean的AnnotationType.
   6.3 <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 寻找指定Bean的AnnotationType

7. BeanDefinitionRegistry 
   7.1 void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) 注册当前BeanDefinition.
   7.2 BeanDefinition getBeanDefinition(String beanName) 根据beanName获取BeanDefinition.

8. DefaultListableBeanFactory 实现了ListableBeanFactory BeanDefinitionRegistry的BeanFactory实现.


   

         
    
  
/***********************************************************************
****************org.springframework.beans.factory.xml********************
***********************************************************************/

1. XmlBeanDefinitionReader xml定义的BeanDefinition读取类. 这个只是读取定义到BeanFactory， 但是却没有实例化,不会导致资源的浪费.
   registerBeanDefinitions -->BeanDefinitionDocumentReader -->DefaultBeanDefinitionDocumentReader
   GenericBeanDefinition: 创建通用的BeanDefinition，并设置className
       解析Bean的id,name,class,parent 到BeanDefinition
           子元素: constructor-arg 构造函数注入。
           子元素: property--> name,ref --> RuntimeBeanReference
            property--> name,value --> TypedStringValue
2. org.springframework.beans.factory.support.BeanDefinitionReaderUtils.registerBeanDefinition注册Bean Name, Bean Definition到Factory中(BeanDefinitionRegistry).

